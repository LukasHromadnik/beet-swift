/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet
import BeetSolana

/**
 * @category Instructions
 * @category CreateTransaction
 * @category generated
 */
public struct CreateTransactionInstructionArgs{
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let pid: PublicKey
    let accs: [TransactionAccount]
    let data: Data
}
/**
 * @category Instructions
 * @category CreateTransaction
 * @category generated
 */
public let createTransactionStruct = FixableBeetArgsStruct<CreateTransactionInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("pid", Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))),
    ("accs", Beet.fixableBeat(array(element: .fixedBeet(.init(value: .scalar(transactionAccountBeet)))))),
    ("data", Beet.fixableBeat(Uint8Array()))
    ],
    description: "CreateTransactionInstructionArgs"
)
/**
* Accounts required by the _createTransaction_ instruction
*
* @property [] multisig  
* @property [_writable_] transaction  
* @property [**signer**] proposer   
* @category Instructions
* @category CreateTransaction
* @category generated
*/
public struct CreateTransactionInstructionAccounts {
        let multisig: PublicKey
        let transaction: PublicKey
        let proposer: PublicKey
        let rent: PublicKey?
}

public let createTransactionInstructionDiscriminator = [103, 108, 111, 98, 97, 108, 58, 99] as [UInt8]

/**
* Creates a _CreateTransaction_ instruction.
*
* @param accounts that will be accessed while the instruction is processed
  * @param args to provide as instruction data to the program
 * 
* @category Instructions
* @category CreateTransaction
* @category generated
*/
public func createCreateTransactionInstruction(accounts: CreateTransactionInstructionAccounts, 
args: CreateTransactionInstructionArgs, programId: PublicKey=PublicKey(string: "")!) -> TransactionInstruction {

    let data = createTransactionStruct.serialize(
            instance: ["instructionDiscriminator": createTransactionInstructionDiscriminator,
"pid": args.pid,
  "accs": args.accs,
  "data": args.data],  byteSize: nil
    )

    let keys: [Account.Meta] = [
        Account.Meta(
            publicKey: accounts.multisig,
            isSigner: false,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.transaction,
            isSigner: false,
            isWritable: true
        ),
        Account.Meta(
            publicKey: accounts.proposer,
            isSigner: true,
            isWritable: false
        ),
        Account.Meta(
            publicKey: accounts.rent ?? PublicKey.sysvarRent,
            isSigner: false,
            isWritable: false
        )
    ]

    let ix = TransactionInstruction(
                keys: keys,
                programId: programId,
                data: data.0.bytes
            )
    return ix
}