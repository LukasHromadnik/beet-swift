/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Beet
import Solana
import BeetSolana


/**
* Arguments used to create {@link Multisig}
* @category Accounts
* @category generated
*/
protocol MultisigArgs {
    
    var owners: [PublicKey] { get }
    var threshold: UInt64 { get }
    var nonce: UInt8 { get }
    var ownerSetSeqno: UInt32 { get }
}


/**
 * Holds the data for the {@link Multisig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Multisig: MultisigArgs {
  let owners: [PublicKey]
  let threshold: UInt64
  let nonce: UInt8
  let ownerSetSeqno: UInt32

  /**
   * Creates a {@link Multisig} instance from the provided args.
   */
  static func fromArgs(args: Args) -> Multisig {
    return Multisig(
        owners: args["owners"] as! [PublicKey],
        threshold: args["threshold"] as! UInt64,
        nonce: args["nonce"] as! UInt8,
        ownerSetSeqno: args["ownerSetSeqno"] as! UInt32
    )
  }
  /**
   * Deserializes the {@link Multisig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static func fromAccountInfo(
    accountInfo: Data,
    offset:Int=0
  ) -> ( Multisig, Int )  {
    return Multisig.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Multisig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Multisig, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Multisig.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Multisig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static func deserialize(
    buf: Data,
    offset: Int = 0
  ) -> ( Multisig, Int ) {
    return multisigBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Multisig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  func serialize() -> ( Data, Int ) {
    return multisigBeet.serialize(instance: [
        "owners" : self.owners,
        "threshold" : self.threshold,
        "nonce" : self.nonce,
        "ownerSetSeqno" : self.ownerSetSeqno], byteSize: nil)
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Multisig} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: MultisigArgs) -> UInt64 {
    return UInt64(multisigBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Multisig} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: MultisigArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Multisig.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let multisigBeet = FixableBeetStruct<Multisig>(
    fields:[
        
        ("owners", Beet.fixableBeat(array(element: Beet.fixedBeet(.init(value: .scalar(BeetPublicKey())))))),
    ("threshold", Beet.fixedBeet(.init(value: .scalar(u64())))),
    ("nonce", Beet.fixedBeet(.init(value: .scalar(u8())))),
    ("ownerSetSeqno", Beet.fixedBeet(.init(value: .scalar(u32()))))
    ],
    construct: Multisig.fromArgs,
    description: "Multisig"
)
